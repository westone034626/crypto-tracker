{"version":3,"sources":["api.ts","routes/Chart.tsx","routes/Price.tsx","theme.ts","ThemeProvider.tsx","routes/Coin.tsx","routes/Coins.tsx","AppRouter.tsx","App.js","index.tsx"],"names":["BASE_URL","fetchAllCoins","fetch","then","res","json","Chart","coinId","useQuery","endDate","Math","floor","Date","now","startDate","fetchCoinHistory","refetchInterval","isLoading","data","type","series","name","map","price","x","time_close","y","open","high","low","close","options","theme","mode","chart","height","width","toolbar","show","background","grid","stroke","curve","yaxis","xaxis","axisBorder","axisTicks","labels","categories","fill","gradient","gradientToColors","stops","colors","tooltip","formatter","value","toFixed","PriceContainer","styled","ul","PriceItem","li","Price","quotes","USD","market_cap_change_24h","percent_change_30m","percent_change_1h","percent_change_12h","percent_change_24h","darkTheme","bgColor","textColor","accentColor","listBgColor","lightTheme","ThemeContext","createContext","undefined","ThemeProvider","children","useState","isDarkMode","setIsDarkMode","Provider","onToggleTheme","prev","Title","LinesEllipsis","props","Loader","span","Container","div","Header","header","Backbutton","ThemeTogglebutton","Toggle","Overview","OverviewItem","Description","p","Tabs","Tab","isActive","Coin","history","useHistory","useParams","state","useLocation","chartMatch","useRouteMatch","priceMatch","fetchCoinInfo","infoDataLoading","infoData","fetchCoinTickers","priceDataLoading","priceData","loading","useContext","Helmet","onClick","goBack","text","maxLine","ellipsis","trimRight","basedOn","uncheckedIcon","checkedIcon","checked","onChange","activeBoxShadow","offHandleColor","onHandleColor","onColor","offColor","rank","symbol","description","total_supply","max_supply","to","replace","path","CoinsList","h1","Img","img","Coins","coins","slice","coin","pathname","id","src","toLowerCase","AppRouter","basename","process","GlobalStyle","createGlobalStyle","App","initialIsOpen","queryClient","QueryClient","ReactDOM","render","StrictMode","client","document","getElementById"],"mappings":"yNAAMA,EAAW,iCAEJC,EAAgB,WAC3B,OAAOC,MAAM,GAAD,OAAIF,EAAJ,WAAsBG,MAAK,SAACC,GAAD,OAASA,EAAIC,W,gCCmFvCC,I,0BAAAA,EAlEf,YAAwC,IAAvBC,EAAsB,EAAtBA,OAAsB,EACTC,mBAC1B,CAAC,QAASD,IACV,kBDT4B,SAACA,GAC/B,IAAME,EAAUC,KAAKC,MAAMC,KAAKC,MAAQ,KAClCC,EAAYL,EAAU,QAC5B,OAAOP,MAAM,GAAD,OACPF,EADO,kBACWO,EADX,mCAC4CO,EAD5C,gBAC6DL,IACvEN,MAAK,SAACC,GAAD,OAASA,EAAIC,UCIZU,CAAiBR,KACvB,CAAES,gBAAiB,MAHbC,EAD6B,EAC7BA,UAAWC,EADkB,EAClBA,KAKnB,OACE,8BACGD,EACC,mBAEA,cAAC,IAAD,CACEE,KAAK,cACLC,OAAQ,CACN,CACEC,KAAM,QACNH,KAAI,OAAEA,QAAF,IAAEA,OAAF,EAAEA,EAAMI,KAAI,SAACC,GAAD,MAAY,CAC1BC,EAAG,IAAIZ,KAAKW,EAAME,YAClBC,EAAG,CAACH,EAAMI,KAAMJ,EAAMK,KAAML,EAAMM,IAAKN,EAAMO,aAInDC,QAAS,CACPC,MAAO,CACLC,KAAM,QAERC,MAAO,CACLC,OAAQ,IACRC,MAAO,IACPC,QAAS,CACPC,MAAM,GAERC,WAAY,eAEdC,KAAM,CAAEF,MAAM,GACdG,OAAQ,CACNC,MAAO,SACPN,MAAO,GAETO,MAAO,CACLL,MAAM,GAERM,MAAO,CACLC,WAAY,CAAEP,MAAM,GACpBQ,UAAW,CAAER,MAAM,GACnBS,OAAQ,CAAET,MAAM,GAChBnB,KAAM,WACN6B,WAAU,OAAE9B,QAAF,IAAEA,OAAF,EAAEA,EAAMI,KAAI,SAACC,GAAD,OAAWA,EAAME,eAEzCwB,KAAM,CACJ9B,KAAM,WACN+B,SAAU,CAAEC,iBAAkB,CAAC,WAAYC,MAAO,CAAC,EAAG,OAExDC,OAAQ,CAAC,WACTC,QAAS,CACP5B,EAAG,CACD6B,UAAW,SAACC,GAAD,iBAAeA,EAAMC,QAAQ,aCxElDC,EAAiBC,IAAOC,GAAV,wHAOdC,EAAYF,IAAOG,GAAV,kLAqCAC,EAxB0B,SAAC,GAAc,IAAZ7C,EAAW,EAAXA,KACpC8C,EAAM,OAAG9C,QAAH,IAAGA,OAAH,EAAGA,EAAM8C,OACrB,OACE,eAACN,EAAD,WACE,eAACG,EAAD,4BAAmBG,QAAnB,IAAmBA,OAAnB,EAAmBA,EAAQC,IAAI1C,SAC/B,eAACsC,EAAD,kDACgCG,QADhC,IACgCA,OADhC,EACgCA,EAAQC,IAAIC,yBAE5C,eAACL,EAAD,oDACkCG,QADlC,IACkCA,OADlC,EACkCA,EAAQC,IAAIE,sBAE9C,eAACN,EAAD,gDAC8BG,QAD9B,IAC8BA,OAD9B,EAC8BA,EAAQC,IAAIG,qBAE1C,eAACP,EAAD,kDACgCG,QADhC,IACgCA,OADhC,EACgCA,EAAQC,IAAII,sBAE5C,eAACR,EAAD,kDACgCG,QADhC,IACgCA,OADhC,EACgCA,EAAQC,IAAIK,0B,gBCxCrCC,EAA0B,CACrCC,QAAS,UACTC,UAAW,UACXC,YAAa,UACbC,YAAa,SAEFC,EAA2B,CACtCJ,QAAS,UACTC,UAAW,UACXC,YAAa,UACbC,YAAa,SCITE,EAAeC,6BAAwCC,GAyB9CC,EAfO,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,SAAwB,EACXC,oBAAS,GADE,mBACxCC,EADwC,KAC5BC,EAD4B,KAM/C,OACE,cAACP,EAAaQ,SAAd,CAAuB7B,MAAO,CAAE2B,aAAYG,cAJxB,WACpBF,GAAc,SAACG,GAAD,OAAWA,OAGzB,SACE,cAAC,IAAD,CAAoBvD,MAAOmD,EAAaZ,EAAYK,EAApD,SACGK,OCfHO,EAAQ7B,YAAO8B,IAAP9B,CAAH,2FAEA,SAAC+B,GAAD,OAAWA,EAAM1D,MAAM0C,eAI5BiB,EAAShC,IAAOiC,KAAV,sEAKNC,EAAYlC,IAAOmC,IAAV,0FAMTC,EAASpC,IAAOqC,OAAV,sIAONC,EAAatC,IAAOmC,IAAV,kHAOVI,EAAoBvC,YAAOwC,IAAPxC,CAAH,sEAKjByC,EAAWzC,IAAOmC,IAAV,yKAORO,EAAe1C,IAAOmC,IAAV,qRAeZQ,EAAc3C,IAAO4C,EAAV,iDAGXC,EAAO7C,IAAOmC,IAAV,2HAOJW,EAAM9C,IAAOiC,KAAV,sQAQE,SAACF,GAAD,OAAYA,EAAMgB,SAAWhB,EAAM1D,MAAM0C,YAAc,WA0MnDiC,I,qBAAAA,GAnIf,WAAiB,IAAD,EACRC,EAAUC,cACRtG,EAAWuG,cAAXvG,OACAwG,EAAUC,cAAVD,MACFE,EAAaC,YAAc,kBAC3BC,EAAaD,YAAc,kBALnB,EAMyC1G,mBACrD,CAAC,OAAQD,IACT,kBLzKyB,SAACA,GAC5B,OAAOL,MAAM,GAAD,OAAIF,EAAJ,kBAAsBO,IAAUJ,MAAK,SAACC,GAAD,OAASA,EAAIC,UKwKtD+G,CAAc7G,MAFH8G,EANL,EAMNpG,UAAkCqG,EAN5B,EAMsBpG,KANtB,EAU2CV,mBACvD,CAAC,QAASD,IACV,kBLzK4B,SAACA,GAC/B,OAAOL,MAAM,GAAD,OAAIF,EAAJ,oBAAwBO,IAAUJ,MAAK,SAACC,GAAD,OAASA,EAAIC,UKwKxDkH,CAAiBhH,KACvB,CAAES,gBAAiB,MAHFwG,EAVL,EAUNvG,UAAmCwG,EAV7B,EAUuBvG,KAK/BwG,EAAUL,GAAmBG,EAfrB,YDpJPG,qBAAW9C,UCoJJ,QAiBsC,CAClDM,YAAY,EACZG,cAAe,cAFTH,EAjBM,EAiBNA,WAAYG,EAjBN,EAiBMA,cA4BpB,OACE,eAACO,EAAD,WACE,cAAC+B,EAAA,EAAD,UACE,iCACQ,OAALb,QAAK,IAALA,OAAA,EAAAA,EAAO1F,MAAP,OAAc0F,QAAd,IAAcA,OAAd,EAAcA,EAAO1F,KAAOqG,EAAU,aAAH,OAAkBJ,QAAlB,IAAkBA,OAAlB,EAAkBA,EAAUjG,SAGpE,eAAC0E,EAAD,WACE,cAACE,EAAD,CAAY4B,QAASjB,EAAQkB,OAA7B,oBACA,cAACtC,EAAD,CACEuC,MACO,OAALhB,QAAK,IAALA,OAAA,EAAAA,EAAO1F,MAAP,OAAc0F,QAAd,IAAcA,OAAd,EAAcA,EAAO1F,KAAOqG,EAAU,aAAH,OAAkBJ,QAAlB,IAAkBA,OAAlB,EAAkBA,EAAUjG,KAEjE2G,QAAQ,IACRC,SAAS,MACTC,WAAS,EACTC,QAAQ,YAGV,cAACjC,EAAD,CACEkC,cAAejD,EACfkD,YAAalD,EACbmD,QAASnD,EACToD,SAAUjD,EACVkD,gBAAgB,mBAChBC,eAAe,UACfC,cAAc,UACdC,QAAQ,UACRC,SAAS,eAGZlB,EACC,cAAC/B,EAAD,yBAEA,qCACE,eAACS,EAAD,WACE,eAACC,EAAD,WACE,yCACA,sCAAOiB,QAAP,IAAOA,OAAP,EAAOA,EAAUuB,UAEnB,eAACxC,EAAD,WACE,2CACA,4CAAQiB,QAAR,IAAQA,OAAR,EAAQA,EAAUwB,aAEpB,eAACzC,EAAD,WACE,0CACA,sCAAOoB,QAAP,IAAOA,OAAP,EAAOA,EAAWzD,OAAOC,IAAI1C,MAAMkC,QAAQ,WAG/C,cAAC6C,EAAD,iBAAcgB,QAAd,IAAcA,OAAd,EAAcA,EAAUyB,cACxB,eAAC3C,EAAD,WACE,eAACC,EAAD,WACE,gDACA,sCAAOoB,QAAP,IAAOA,OAAP,EAAOA,EAAWuB,kBAEpB,eAAC3C,EAAD,WACE,+CACA,sCAAOoB,QAAP,IAAOA,OAAP,EAAOA,EAAWwB,mBAGtB,eAACzC,EAAD,WACE,cAACC,EAAD,CAAKC,SAAyB,OAAfO,EAAf,SACE,cAAC,IAAD,CAAMiC,GAAE,WAAM3I,EAAN,UAAsB4I,SAAO,EAArC,qBAIF,cAAC1C,EAAD,CAAKC,SAAyB,OAAfS,EAAf,SACE,cAAC,IAAD,CAAM+B,GAAE,WAAM3I,EAAN,UAAsB4I,SAAO,EAArC,wBAKJ,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,KAAK,iBAAZ,SACE,cAAC,EAAD,CAAOlI,KAAMuG,MAEf,cAAC,IAAD,CAAO2B,KAAK,iBAAZ,SACE,cAAC,EAAD,CAAO7I,OAAQA,gBC3RvBsF,GAAYlC,IAAOmC,IAAV,0FAMTC,GAASpC,IAAOqC,OAAV,qHAONqD,GAAY1F,IAAOC,GAAV,4BAET+C,GAAOhD,IAAOG,GAAV,qSAaK,SAAC4B,GAAD,OAAWA,EAAM1D,MAAM0C,eAKhCc,GAAQ7B,IAAO2F,GAAV,iEAEA,SAAC5D,GAAD,OAAWA,EAAM1D,MAAM0C,eAG5BiB,GAAShC,IAAOiC,KAAV,wEAKN2D,GAAM5F,IAAO6F,IAAV,sFAqEMC,I,GAAAA,GArDf,WAAiB,MAG6BjJ,mBAC1C,WACAP,GAFiByH,EAHJ,EAGPzG,UAA0ByI,EAHnB,EAGaxI,KAc5B,OACE,eAAC,GAAD,WACE,cAAC0G,EAAA,EAAD,UACE,mDAEF,cAAC,GAAD,UACE,cAAC,GAAD,6BAEDF,EACC,cAAC,GAAD,yBAEA,cAAC2B,GAAD,iBACGK,QADH,IACGA,OADH,EACGA,EAAOC,MAAM,EAAG,KAAKrI,KAAI,SAACsI,GACzB,OACE,cAAC,GAAD,UACE,eAAC,IAAD,CACEV,GAAI,CACFW,SAAS,IAAD,OAAMD,EAAKE,IACnB/C,MAAO,CAAE1F,KAAMuI,EAAKvI,OAHxB,UAME,cAACkI,GAAD,CAEEQ,IAAG,qDAAgDH,EAAKd,OAAOkB,iBAEhEJ,EAAKvI,KAVR,cADSuI,EAAKE,aC7EfG,GAfG,WAChB,OACE,cAAC,IAAD,CAAeC,SAAUC,kBAAzB,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOf,KAAK,WAAZ,SACE,cAAC,GAAD,MAEF,cAAC,IAAD,CAAOA,KAAK,IAAZ,SACE,cAAC,GAAD,Y,kBCPJgB,GAAcC,YAAH,+YAQO,SAAC3E,GAAD,OAAWA,EAAM1D,MAAMwC,WACnC,SAACkB,GAAD,OAAWA,EAAM1D,MAAMyC,aAoBpB6F,OAXf,WACE,OACE,qCACE,cAAC,KAAD,IACA,cAACF,GAAD,IACA,cAAC,GAAD,IACA,cAAC,sBAAD,CAAoBG,eAAe,QCvBnCC,GAAc,IAAIC,cAExBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,sBAAD,CAAqBC,OAAQL,GAA7B,SACE,cAAC,EAAD,UACE,cAAC,GAAD,UAINM,SAASC,eAAe,W","file":"static/js/main.2c9128e4.chunk.js","sourcesContent":["const BASE_URL = 'https://api.coinpaprika.com/v1';\n\nexport const fetchAllCoins = () => {\n  return fetch(`${BASE_URL}/coins`).then((res) => res.json());\n};\n\nexport const fetchCoinInfo = (coinId: string) => {\n  return fetch(`${BASE_URL}/coins/${coinId}`).then((res) => res.json());\n};\n\nexport const fetchCoinTickers = (coinId: string) => {\n  return fetch(`${BASE_URL}/tickers/${coinId}`).then((res) => res.json());\n};\n\nexport const fetchCoinHistory = (coinId: string) => {\n  const endDate = Math.floor(Date.now() / 1000);\n  const startDate = endDate - 60 * 60 * 24 * 7 * 2;\n  return fetch(\n    `${BASE_URL}/coins/${coinId}/ohlcv/historical?start=${startDate}&end=${endDate}`\n  ).then((res) => res.json());\n};\n","import React from 'react';\nimport { fetchCoinHistory } from '../api';\nimport { useQuery } from 'react-query';\nimport ApexChart from 'react-apexcharts';\n\ninterface ChartProps {\n  coinId: string;\n}\n\ninterface IHistorical {\n  time_open: string;\n  time_close: string;\n  open: number;\n  high: number;\n  low: number;\n  close: number;\n  volume: number;\n  market_cap: number;\n}\n\nfunction Chart({ coinId }: ChartProps) {\n  const { isLoading, data } = useQuery<IHistorical[]>(\n    ['ohlcv', coinId],\n    () => fetchCoinHistory(coinId),\n    { refetchInterval: 10000 }\n  );\n  return (\n    <div>\n      {isLoading ? (\n        'Loading chart...'\n      ) : (\n        <ApexChart\n          type=\"candlestick\"\n          series={[\n            {\n              name: 'Price',\n              data: data?.map((price) => ({\n                x: new Date(price.time_close),\n                y: [price.open, price.high, price.low, price.close],\n              })),\n            },\n          ]}\n          options={{\n            theme: {\n              mode: 'dark',\n            },\n            chart: {\n              height: 300,\n              width: 500,\n              toolbar: {\n                show: false,\n              },\n              background: 'transparent',\n            },\n            grid: { show: false },\n            stroke: {\n              curve: 'smooth',\n              width: 4,\n            },\n            yaxis: {\n              show: false,\n            },\n            xaxis: {\n              axisBorder: { show: false },\n              axisTicks: { show: false },\n              labels: { show: false },\n              type: 'datetime',\n              categories: data?.map((price) => price.time_close),\n            },\n            fill: {\n              type: 'gradient',\n              gradient: { gradientToColors: ['#0be881'], stops: [0, 100] },\n            },\n            colors: ['#0fbcf9'],\n            tooltip: {\n              y: {\n                formatter: (value) => `$${value.toFixed(2)}`,\n              },\n            },\n          }}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default Chart;\n\n// 해야하는 것들\n\n// 0. fetch data를 typing하기(pre: writing interface IHistorical)\n// 1. coin의 ohlcv 정보를 chart로 표시하기(pre: install library: apex chart)\n\n// 알게 된 것들\n\n// 1. apex chart라는 차트 라이브러리의 존재\n// 2. chart에서 흔히 통용되는 용어에 대해 알게됨(x축의 밑에 있는 점자 표시는 scale or tick이라고 부른다, 배경의 칸은 grid라고 부른다)\n// 3. toFixed로 소숫점 고정할 수 있다는 것 상기\n// 4. fetching한 data를 가지고 Apex Chart에 사용하는 방식(map으로 특정 데이터를 배열화해서 사용)\n","import React from 'react';\nimport styled from 'styled-components';\nimport { PriceData } from './Coin';\n\nconst PriceContainer = styled.ul`\n  margin-top: -20px;\n  margin-bottom: -20px;\n  padding-top: 1px;\n  padding-bottom: 1px;\n`;\n\nconst PriceItem = styled.li`\n  background-color: rgba(0, 0, 0, 0.5);\n  border-radius: 10px;\n  color: white;\n  padding: 25px 50px;\n  margin-top: 20px;\n  margin-bottom: 20px;\n`;\n\ninterface PriceRouteProps {\n  data?: PriceData;\n}\n\nconst Price: React.FC<PriceRouteProps> = ({ data }) => {\n  const quotes = data?.quotes;\n  return (\n    <PriceContainer>\n      <PriceItem>Price: {quotes?.USD.price}</PriceItem>\n      <PriceItem>\n        Max Change rate in last 24h: {quotes?.USD.market_cap_change_24h}\n      </PriceItem>\n      <PriceItem>\n        Change rate (last 30 Minutes): {quotes?.USD.percent_change_30m}\n      </PriceItem>\n      <PriceItem>\n        Change rate (last 1 Hour): {quotes?.USD.percent_change_1h}\n      </PriceItem>\n      <PriceItem>\n        Change rate (last 12 Hours): {quotes?.USD.percent_change_12h}\n      </PriceItem>\n      <PriceItem>\n        Change rate (last 24 Hours): {quotes?.USD.percent_change_24h}\n      </PriceItem>\n    </PriceContainer>\n  );\n};\n\nexport default Price;\n","import { DefaultTheme } from 'styled-components';\n\nexport const darkTheme: DefaultTheme = {\n  bgColor: '#2f3640',\n  textColor: '#f5f6fa',\n  accentColor: '#9c88ff',\n  listBgColor: 'white',\n};\nexport const lightTheme: DefaultTheme = {\n  bgColor: '#f5f6fa',\n  textColor: '#2f3640',\n  accentColor: '#9c88ff',\n  listBgColor: 'black',\n};\n","import React, {\n  useState,\n  createContext,\n  useContext,\n  useMemo,\n  ReactChildren,\n  ReactChild,\n} from 'react';\nimport { ThemeProvider as ThemeColorProvider } from 'styled-components';\nimport { darkTheme, lightTheme } from './theme';\n\ninterface ContextProps {\n  isDarkMode: boolean;\n  onToggleTheme: () => void;\n}\n\nconst ThemeContext = createContext<ContextProps | undefined>(undefined);\n\nexport const useTheme = () => {\n  return useContext(ThemeContext);\n};\n\ninterface AuxProp {\n  children: ReactChild | ReactChildren;\n}\n\nconst ThemeProvider = ({ children }: AuxProp) => {\n  const [isDarkMode, setIsDarkMode] = useState(true);\n\n  const onToggleTheme = () => {\n    setIsDarkMode((prev) => !prev);\n  };\n  return (\n    <ThemeContext.Provider value={{ isDarkMode, onToggleTheme }}>\n      <ThemeColorProvider theme={isDarkMode ? darkTheme : lightTheme}>\n        {children}\n      </ThemeColorProvider>\n    </ThemeContext.Provider>\n  );\n};\n\nexport default ThemeProvider;\n","import Toggle from 'react-switch';\nimport LinesEllipsis from 'react-lines-ellipsis';\n\nimport {\n  Switch,\n  Route,\n  useLocation,\n  useParams,\n  useRouteMatch,\n  useHistory,\n  Link,\n} from 'react-router-dom';\nimport styled from 'styled-components';\nimport Chart from './Chart';\nimport Price from './Price';\nimport { useQuery } from 'react-query';\nimport { fetchCoinInfo, fetchCoinTickers } from '../api';\nimport { Helmet } from 'react-helmet';\nimport { useTheme } from '../ThemeProvider';\n\nconst Title = styled(LinesEllipsis)`\n  font-size: 48px;\n  color: ${(props) => props.theme.accentColor};\n  grid-column: 2 / span 1;\n`;\n\nconst Loader = styled.span`\n  text-align: center;\n  display: block;\n`;\n\nconst Container = styled.div`\n  padding: 0px 20px;\n  max-width: 480px;\n  margin: 0 auto;\n`;\n\nconst Header = styled.header`\n  height: 15vh;\n  display: grid;\n  grid-template-columns: 1fr auto 1fr;\n  place-items: center center;\n`;\n\nconst Backbutton = styled.div`\n  justify-self: start;\n  font-size: 2rem;\n  font-weight: bold;\n  cursor: pointer;\n`;\n\nconst ThemeTogglebutton = styled(Toggle)`\n  justify-self: end;\n  pointer: cursor;\n`;\n\nconst Overview = styled.div`\n  display: flex;\n  justify-content: space-between;\n  background-color: rgba(0, 0, 0, 0.5);\n  padding: 10px 20px;\n  border-radius: 10px;\n`;\nconst OverviewItem = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 33%;\n  span {\n    color: white;\n  }\n  span:first-child {\n    font-size: 10px;\n    font-weight: '400';\n    text-transform: uppercase;\n    margin-bottom: 5px;\n  }\n`;\nconst Description = styled.p`\n  margin: 20px 0px;\n`;\nconst Tabs = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  margin: 25px 0px;\n  gap: 10px;\n`;\n\nconst Tab = styled.span<{ isActive: boolean }>`\n  text-align: center;\n  text-transform: uppercase;\n  font-size: 12px;\n  font-weight: '400';\n  background-color: rgba(0, 0, 0, 0.5);\n\n  border-radius: 10px;\n  color: ${(props) => (props.isActive ? props.theme.accentColor : 'white')};\n  a {\n    padding: 7px 0px;\n    display: block;\n  }\n`;\ninterface RouteParam {\n  coinId: string;\n}\n\ninterface RouteState {\n  name: string;\n}\n\ninterface InfoData {\n  id: string;\n  name: string;\n  symbol: string;\n  rank: number;\n  is_new: boolean;\n  is_active: boolean;\n  type: string;\n  contract: string;\n  platform: string;\n  description: string;\n  message: string;\n  open_source: boolean;\n  started_at: string;\n  development_status: string;\n  hardware_wallet: boolean;\n  proof_type: string;\n  org_structure: string;\n  hash_algorithm: string;\n  first_data_at: string;\n  last_data_at: string;\n}\n\nexport interface PriceData {\n  id: string;\n  name: string;\n  symbol: string;\n  rank: number;\n  circulating_supply: number;\n  total_supply: number;\n  max_supply: number;\n  beta_value: number;\n  first_data_at: string;\n  last_updated: string;\n  quotes: {\n    USD: {\n      price: number;\n      volume_24h: number;\n      volume_24h_change_24h: number;\n      market_cap: number;\n      market_cap_change_24h: number;\n      percent_change_15m: number;\n      percent_change_30m: number;\n      percent_change_1h: number;\n      percent_change_6h: number;\n      percent_change_12h: number;\n      percent_change_24h: number;\n      percent_change_7d: number;\n      percent_change_30d: number;\n      percent_change_1y: number;\n      ath_price: number;\n      ath_date: string;\n      percent_from_price_ath: number;\n    };\n  };\n}\n\nfunction Coin() {\n  const history = useHistory();\n  const { coinId } = useParams<RouteParam>();\n  const { state } = useLocation<RouteState>();\n  const chartMatch = useRouteMatch('/:coinId/chart');\n  const priceMatch = useRouteMatch('/:coinId/price');\n  const { isLoading: infoDataLoading, data: infoData } = useQuery<InfoData>(\n    ['info', coinId],\n    () => fetchCoinInfo(coinId)\n  );\n  const { isLoading: priceDataLoading, data: priceData } = useQuery<PriceData>(\n    ['price', coinId],\n    () => fetchCoinTickers(coinId),\n    { refetchInterval: 5000 }\n  );\n  const loading = infoDataLoading || priceDataLoading;\n\n  const { isDarkMode, onToggleTheme } = useTheme() ?? {\n    isDarkMode: true,\n    onToggleTheme: () => {},\n  };\n  // const [loading, setLoading] = useState(true);\n  // const [infoData, setInfoData] = useState<InfoData>();\n  // const [priceData, setPriceData] = useState<PriceData>();\n\n  // useEffect(() => {\n  //   (async () => {\n  //     try {\n  //       const infoData = await (\n  //         await fetch(`https://api.coinpaprika.com/v1/coins/${coinId}`)\n  //       ).json();\n  //       const priceData = await (\n  //         await fetch(`https://api.coinpaprika.com/v1/tickers/${coinId}`)\n  //       ).json();\n  //       setLoading(false);\n  //       setInfoData(infoData);\n  //       setPriceData(priceData);\n  //       console.log(infoData);\n  //       console.log(priceData);\n  //     } catch (error) {\n  //       console.log('error: ', error);\n  //     }\n  //   })();\n  // }, [coinId]);\n\n  return (\n    <Container>\n      <Helmet>\n        <title>\n          {state?.name ? state?.name : loading ? 'Loading...' : infoData?.name}\n        </title>\n      </Helmet>\n      <Header>\n        <Backbutton onClick={history.goBack}>&larr;</Backbutton>\n        <Title\n          text={\n            state?.name ? state?.name : loading ? 'Loading...' : infoData?.name\n          }\n          maxLine=\"1\"\n          ellipsis=\"...\"\n          trimRight\n          basedOn=\"letters\"\n        />\n\n        <ThemeTogglebutton\n          uncheckedIcon={isDarkMode}\n          checkedIcon={isDarkMode}\n          checked={isDarkMode}\n          onChange={onToggleTheme}\n          activeBoxShadow=\"0 0 2px 3px #aaa\"\n          offHandleColor=\"#f5f6fa\"\n          onHandleColor=\"#2f3640\"\n          onColor=\"#f5f6fa\"\n          offColor=\"#2f3640\"\n        />\n      </Header>\n      {loading ? (\n        <Loader>Loading...</Loader>\n      ) : (\n        <>\n          <Overview>\n            <OverviewItem>\n              <span>Rank:</span>\n              <span>{infoData?.rank}</span>\n            </OverviewItem>\n            <OverviewItem>\n              <span>Symbol:</span>\n              <span>${infoData?.symbol}</span>\n            </OverviewItem>\n            <OverviewItem>\n              <span>Price:</span>\n              <span>{priceData?.quotes.USD.price.toFixed(8)}</span>\n            </OverviewItem>\n          </Overview>\n          <Description>{infoData?.description}</Description>\n          <Overview>\n            <OverviewItem>\n              <span>Total Suply:</span>\n              <span>{priceData?.total_supply}</span>\n            </OverviewItem>\n            <OverviewItem>\n              <span>Max Supply:</span>\n              <span>{priceData?.max_supply}</span>\n            </OverviewItem>\n          </Overview>\n          <Tabs>\n            <Tab isActive={chartMatch !== null}>\n              <Link to={`/${coinId}/chart`} replace>\n                Chart\n              </Link>\n            </Tab>\n            <Tab isActive={priceMatch !== null}>\n              <Link to={`/${coinId}/price`} replace>\n                Price\n              </Link>\n            </Tab>\n          </Tabs>\n          <Switch>\n            <Route path=\"/:coinId/price\">\n              <Price data={priceData} />\n            </Route>\n            <Route path=\"/:coinId/chart\">\n              <Chart coinId={coinId} />\n            </Route>\n          </Switch>\n        </>\n      )}\n    </Container>\n  );\n}\n\nexport default Coin;\n\n// 해야하는 것들\n\n// 1. react-query를 이용하여 Coin 페이지의 infoData, priceData 정보를 fetch하자.\n","import Helmet from 'react-helmet';\nimport { Link } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { useQuery } from 'react-query';\nimport { fetchAllCoins } from '../api';\n\nconst Container = styled.div`\n  padding: 0px 20px;\n  max-width: 480px;\n  margin: auto;\n`;\n\nconst Header = styled.header`\n  height: 15vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst CoinsList = styled.ul``;\n\nconst Coin = styled.li`\n  background-color: white;\n  color: #2f3640;\n  border-radius: 15px;\n  margin-bottom: 10px;\n  a {\n    padding: 20px;\n    display: flex;\n    align-items: center;\n    transition: color 0.2s ease-in;\n  }\n  &:hover {\n    a {\n      color: ${(props) => props.theme.accentColor};\n    }\n  }\n`;\n\nconst Title = styled.h1`\n  font-size: 48px;\n  color: ${(props) => props.theme.accentColor};\n`;\n\nconst Loader = styled.span`\n  display: block;\n  text-align: center;\n`;\n\nconst Img = styled.img`\n  width: 35px;\n  height: 35px;\n  margin-right: 10px;\n`;\n\ninterface ICoin {\n  id: string;\n  name: string;\n  symbol: string;\n  rank: number;\n  is_new: boolean;\n  is_active: boolean;\n  type: string;\n}\n\nfunction Coins() {\n  // const [coins, setCoins] = useState<CoinInterface[]>([]);\n  // const [loading, setLoading] = useState(true);\n  const { isLoading: loading, data: coins } = useQuery<ICoin[]>(\n    'allCoins',\n    fetchAllCoins\n  );\n\n  // useEffect(() => {\n  //   (async () => {\n  //     const response = await fetch('https://api.coinpaprika.com/v1/coins');\n  //     const json = await response.json();\n  //     setCoins(json.slice(0, 100));\n  //     setLoading(false);\n  //   })();\n  // }, []);\n\n  return (\n    <Container>\n      <Helmet>\n        <title>코인</title>\n      </Helmet>\n      <Header>\n        <Title>코인</Title>\n      </Header>\n      {loading ? (\n        <Loader>Loading...</Loader>\n      ) : (\n        <CoinsList>\n          {coins?.slice(0, 100).map((coin) => {\n            return (\n              <Coin key={coin.id}>\n                <Link\n                  to={{\n                    pathname: `/${coin.id}`,\n                    state: { name: coin.name },\n                  }}\n                >\n                  <Img\n                    // 보통 api의 path로 쓸 소문자로만 구성된 텍스트를 전달한다는 것을 toLowerCase()통해 새삼 알게됨\n                    src={`https://cryptoicon-api.vercel.app/api/icon/${coin.symbol.toLowerCase()}`}\n                  />\n                  {coin.name} &rarr;\n                </Link>\n              </Coin>\n            );\n          })}\n        </CoinsList>\n      )}\n    </Container>\n  );\n}\n\nexport default Coins;\n\n// 해야하는 것들(우선순위: high)\n// gh-pages로 배포하기\n\n// 추가해보고 싶은 기능들(우선순위: low)\n// 1. scroll에 반응하는 progress bar 기능(position sticky)\n// 2. Header를 컴포넌트로 구현하기\n// 3. Header 영역을 sticky하게 구현하기\n// 4. 누르면 맨위로 가지는 floating button 구현\n// 5. useMemo, useCallback, React.memo 고민해보기\n","import { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport Coin from './routes/Coin';\nimport Coins from './routes/Coins';\n\nconst AppRouter = () => {\n  return (\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <Switch>\n        <Route path=\"/:coinId\">\n          <Coin />\n        </Route>\n        <Route path=\"/\">\n          <Coins />\n        </Route>\n      </Switch>\n    </BrowserRouter>\n  );\n};\n\nexport default AppRouter;\n","import AppRouter from './AppRouter';\nimport { Reset } from 'styled-reset';\nimport styled, { createGlobalStyle } from 'styled-components';\nimport { ReactQueryDevtools } from 'react-query/devtools';\n\nconst GlobalStyle = createGlobalStyle`\n  @import url('https://fonts.googleapis.com/css2?family=Source+Sans+Pro:ital,wght@0,400;1,300&display=swap');\n  * {\n    box-sizing: border-box;\n  }\n  body {\n    font-weight: '300';\n    font-family: 'Source Sans Pro', sans-serif;\n    background-color: ${(props) => props.theme.bgColor};\n    color:${(props) => props.theme.textColor};\n    line-height: 1.2;\n  }\n  a {\n    text-decoration: none;\n    color: inherit;\n  }\n`;\n\nfunction App() {\n  return (\n    <>\n      <Reset />\n      <GlobalStyle />\n      <AppRouter />\n      <ReactQueryDevtools initialIsOpen={true} />\n    </>\n  );\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport React from 'react';\nimport App from './App';\nimport { QueryClientProvider, QueryClient } from 'react-query';\nimport ThemeProvider from './ThemeProvider';\n\nconst queryClient = new QueryClient();\n\nReactDOM.render(\n  <React.StrictMode>\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider>\n        <App />\n      </ThemeProvider>\n    </QueryClientProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}